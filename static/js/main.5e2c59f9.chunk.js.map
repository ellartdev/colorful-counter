{"version":3,"sources":["Components/warning.svg","Components/EpilepsyWarning.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["EpilepsyWarning","className","src","warningIcon","alt","Component","App","props","state","seconds","randomLetters","bgColor","randStringColor","secColor","hexColor","speed","warning","handleSpeed","bind","loop","this","setState","randomString","cssRandHexCode","evt","target","value","digit","letters","code","i","Math","floor","random","length","numbers","ticking","window","setTimeout","a","interval","clearInterval","style","backgroundColor","onChange","type","name","min","max","React","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mQAAe,G,MAAA,IAA0B,qC,OCkB1BA,E,4JAdX,WACI,OACI,sBAAKC,UAAU,kBAAf,UACI,qBAAKC,IAAKC,EAAaC,IAAI,YAAYH,UAAU,SACjD,iDACA,sMAGA,8E,GATcI,aCkGfC,E,kDAzFb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,QAAS,EACTC,cAAe,GACfC,QAAS,OACTC,gBAAiB,OACjBC,SAAU,OACVC,SAAU,OACVC,MAAO,IACPC,SAAS,GAEX,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,KAAO,EAAKA,KAAKD,KAAV,gBAbK,E,2CAgBnB,WACEE,KAAKC,SAAL,2BACKD,KAAKZ,OADV,IAEEC,QAASW,KAAKZ,MAAMC,QAAU,EAC9BC,cAAeU,KAAKE,aAAa,GACjCX,QAASS,KAAKG,iBACdX,gBAAiBQ,KAAKG,iBACtBV,SAAUO,KAAKG,iBACfT,SAAUM,KAAKG,sB,yBAInB,SAAYC,GACVJ,KAAKC,SAAL,2BAAmBD,KAAKZ,OAAxB,IAA+BO,MAAOS,EAAIC,OAAOC,W,0BAGnD,SAAaC,GAGX,IAFA,IAAIC,EAAU,uJACVC,EAAO,GACFC,EAAI,EAAGA,EAAIH,EAAOG,IACzBD,GAAQD,EAAQG,KAAKC,MAAMD,KAAKE,SAAWL,EAAQM,SAErD,OAAOL,I,4BAGT,WAGE,IAFA,IAAIM,EAAU,mBACVN,EAAO,IACFC,EAAI,EAAGA,EAAI,EAAGA,IACrBD,GAAQM,EAAQJ,KAAKC,MAAMD,KAAKE,SAAWE,EAAQD,SAErD,OAAOL,I,kBAGT,WAEET,KAAKgB,UACLC,OAAOC,WAAWlB,KAAKD,KAAMC,KAAKZ,MAAMO,S,+BAG1C,WAAqB,IAAD,OAClBuB,WAAU,sBAAC,sBAAAC,EAAA,sEACH,EAAKlB,SAAS,CAACL,SAAU,EAAKR,MAAMQ,UADjC,uBAEa,EAAKG,OAFlB,OAET,EAAKqB,SAFI,kDAGR,O,kCAGL,WACEC,cAAcrB,KAAKoB,Y,oBAGrB,WACE,OACE,qBACAE,MAAO,CAAEC,gBAAiBvB,KAAKZ,MAAMG,SACrCV,UAAU,MAFV,SAGE,yBAAQA,UAAU,aAAlB,UACImB,KAAKZ,MAAMQ,SAAW,cAAC,EAAD,KACrBI,KAAKZ,MAAMQ,SACZ,sBAAKf,UAAU,UAAf,UACE,mBAAGyC,MAAO,CAACC,gBAAiBvB,KAAKZ,MAAMK,UAAvC,SAAoDO,KAAKZ,MAAMC,UAC/D,mBAAGiC,MAAO,CAACC,gBAAiBvB,KAAKZ,MAAMI,iBAAvC,SAAyD,4BAAKQ,KAAKZ,MAAME,kBACzE,mBAAGgC,MAAO,CAACC,gBAAiBvB,KAAKZ,MAAMM,UAAvC,SAAoDM,KAAKZ,MAAMG,UAC/D,uBAAOe,MAAON,KAAKZ,MAAMO,MAAO6B,SAAUxB,KAAKH,YAAa4B,KAAK,QAAQC,KAAK,QAAQC,IAAI,IAAIC,IAAI,SAClG,4BAAI5B,KAAKZ,MAAMO,oB,GAlFXkC,IAAM5C,WCEJ6C,QACW,cAA7Bb,OAAOc,SAASC,UAEe,UAA7Bf,OAAOc,SAASC,UAEhBf,OAAOc,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5e2c59f9.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/warning.46c9eb58.svg\";","import React, { Component } from 'react';\r\nimport warningIcon from './warning.svg';\r\n\r\nclass EpilepsyWarning extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"EpilepsyWarning\">\r\n                <img src={warningIcon} alt=\"warn-icon\" className=\"Icon\" />\r\n                <h1>SEIZURE WARNING</h1>\r\n                <p>This page contains fast flashing colors when slider input is set to fast speed.\r\n                    It may cause discomfort and trigger seizures for people with photosensitive epilepsy.\r\n                </p>\r\n                <p>Viewer discretion is advised. Be safe!</p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default EpilepsyWarning;","import React from 'react';\r\nimport './App.css';\r\n/**\r\n * DISCLAIMER\r\n * ---------------------------------------------------------\r\n * I take no responsibility for epileptic seizures.\r\n * Be safe and cautious!\r\n */\r\nimport EpilepsyWarning from './Components/EpilepsyWarning';\r\n\r\nclass App extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      seconds: 0,\r\n      randomLetters: '',\r\n      bgColor: '#000',\r\n      randStringColor: '#fff',\r\n      secColor: '#fff',\r\n      hexColor: '#fff',\r\n      speed: 1000,\r\n      warning: true\r\n    };\r\n    this.handleSpeed = this.handleSpeed.bind(this);\r\n    this.loop = this.loop.bind(this);\r\n  };\r\n\r\n  ticking() {\r\n    this.setState({\r\n      ...this.state,\r\n      seconds: this.state.seconds + 1,\r\n      randomLetters: this.randomString(9),\r\n      bgColor: this.cssRandHexCode(),\r\n      randStringColor: this.cssRandHexCode(),\r\n      secColor: this.cssRandHexCode(),\r\n      hexColor: this.cssRandHexCode(),\r\n    });\r\n  };\r\n\r\n  handleSpeed(evt) {\r\n    this.setState({ ...this.state, speed: evt.target.value });\r\n  };\r\n\r\n  randomString(digit) {\r\n    let letters = '0123456789AĀĄBCČDEĒĘĖFGĢHIĪĮJKĶLĻMNŅOPQRSŠZŽTUŪŲVWÕÄÖÜXY'; // Baltic States alphabet combined\r\n    let code = \"\";\r\n    for (let i = 0; i < digit; i++) {\r\n      code += letters[Math.floor(Math.random() * letters.length)];\r\n    };\r\n    return code;\r\n  };\r\n\r\n  cssRandHexCode() {\r\n    let numbers = '0123456789ABCDEF';\r\n    let code = \"#\";\r\n    for (let i = 0; i < 6; i++) {\r\n      code += numbers[Math.floor(Math.random() * numbers.length)];\r\n    };\r\n    return code;\r\n  };\r\n\r\n  loop() {\r\n    //this.setState({seconds: this.state.seconds + 1})\r\n    this.ticking()\r\n    window.setTimeout(this.loop, this.state.speed)\r\n  }\r\n\r\n  componentDidMount() {\r\n    setTimeout(async () => {\r\n      await this.setState({warning: !this.state.warning});\r\n      this.interval = await this.loop() \r\n    }, 5000);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.interval);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n      style={{ backgroundColor: this.state.bgColor }}\r\n      className=\"App\">\r\n        <header className=\"App-header\">\r\n          { this.state.warning && <EpilepsyWarning /> }\r\n          { !this.state.warning && (\r\n            <div className=\"Counter\">\r\n              <p style={{backgroundColor: this.state.secColor}}>{ this.state.seconds }</p>\r\n              <p style={{backgroundColor: this.state.randStringColor}}><b>{ this.state.randomLetters }</b></p>\r\n              <p style={{backgroundColor: this.state.hexColor}}>{ this.state.bgColor }</p>\r\n              <input value={this.state.speed} onChange={this.handleSpeed} type=\"range\" name=\"speed\" min=\"0\" max=\"2000\" />\r\n              <p>{this.state.speed}</p>\r\n            </div>\r\n          )}\r\n        </header>\r\n      </div>\r\n    );\r\n  };\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}